"""
Select a diverse set of routes that are not deeper than a maximum threshold.
Diversity calculation re-implemented from diversipy package.

Example:
    python select_routes.py --model ../data/chembl_10k_route_distance_model.ckpt


The input and output is a pickled list of an internal route structure format that
is common to many of the setup scripts. 

The script will output the selected routes in JSON-format, the selected targets in
a text file with SMILES strings and the stock compounds in a textfile with SMILES strings
or InChI-keys.
"""
import argparse
import pickle
import json
from typing import List, Dict, Any, Set
import  random
random.seed(3)
import numpy as np
import pandas as pd

from route_distances.route_distances import route_distances_calculator
from route_distances.clustering import ClusteringHelper
from route_distances.utils.routes import extract_leaves
from select_routes_time import *


def _get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser("Tool extract non-overlapping routes")
    parser.add_argument(
        "--filename",
        default="uspto/non_overlapping_routes_sorted.pickle",
        help="the path to an output file generated by the 'find_non_overlaps.py' script",
    )
    parser.add_argument(
        "--output",
        default="data/{}-routes.pickle",
        help="the output filename",
    )
    parser.add_argument(
        "--model", help="the path to a LSTM route distance model", default='../data/chembl_10k_route_distance_model.ckpt'
    )
    parser.add_argument(
        "--stock", default="data/{}-stock.txt", help="the filename of the stock file"
    )
    parser.add_argument(
        "--targets", default="data/{}-targets.txt", help="the filename of the targets file"
    )
    parser.add_argument(
        "--ref-routes",
        default="data/{}-routes.json",
        help="the filename of the file with the reference routes",
    )
    parser.add_argument(
        "--size", type=int, default=8000, help="the number of routes to select"
    )
    parser.add_argument(
        "--max-reaction", type=int, default=10, help="the maximum depth of a route"
    )
    parser.add_argument(
        "--stock_kind",
        choices=["smi", "inchi"],
        default="smi",
        help="the format of the stock, either SMILES strings or InChI keys",
    )
    return parser.parse_args()


def _select_routes_greedy_maxmin(distances: np.ndarray, size: int) -> List[int]:
    aggregated_dist_criteria = distances[0, :]
    previous_index = np.argmax(aggregated_dist_criteria)
    selected_indices = [previous_index]
    while len(selected_indices) < size:
        sel_distances = distances[previous_index, :]
        aggregated_dist_criteria = np.minimum(
            aggregated_dist_criteria, sel_distances.ravel()
        )
        previous_index = np.argmax(aggregated_dist_criteria)
        selected_indices.append(previous_index)
    return selected_indices


def main() -> None:
    args = _get_args()

    with open(args.filename, "rb") as fileobj:
        routes = pickle.load(fileobj)
    print(f"Read {len(routes)}  routes in total")
    nrxn = sum([r["nreactions"] for r in routes])
    print(f"These routes contain {nrxn} reactions")

    routes = [route for route in routes if route["nreactions"] <= args.max_reaction]
    print(f"Keeping {len(routes)} with at most {args.max_reaction} reactions")

    random.shuffle(routes)
    routes2 = []
    pids = []
    for route in routes:
        pid = route['id'].split('@')[0]
        if pid not in pids:
            pids += [pid]
            routes2 += [route]
    routes = routes2
    del routes2

    nrxn = sum([r["nreactions"] for r in routes])
    print(f"Keeping {len(routes)} with {nrxn} reactions")

    for fid in ["rd-test", "rd-valid"]:

        indices = calc_distances (routes, args, args.size)
        selected_routes = [routes[idx] for idx in indices]
        routes = [routes[idx] for idx in range(len(routes)) if idx not in indices]

        nrxn = sum([r["nreactions"] for r in selected_routes])
        print(f"These routes contain {nrxn} reactions")

        save_data(selected_routes, args, fid)


if __name__ == "__main__":
    main()
